// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var Glamor      = require("../src/Glamor.bs.js");
var $$String    = require("bs-platform/lib/js/string.js");
var TestHelpers = require("./TestHelpers.bs.js");

function ident(prim) {
  return prim;
}

function transitionProperty(v) {
  return /* tuple */[
          "transitionProperty",
          v
        ];
}

describe("many - coercion", (function () {
        var many = function (values) {
          return $$String.concat(", ", List.map((function (prim) {
                            return prim;
                          }), values));
        };
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              Glamor.none
            ], /* tuple */[
              "transitionProperty",
              "none"
            ]);
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              Glamor.all
            ], /* tuple */[
              "transitionProperty",
              "all"
            ]);
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              "foo"
            ], /* tuple */[
              "transitionProperty",
              "foo"
            ]);
        return TestHelpers.testDeclaration(/* tuple */[
                    "transitionProperty",
                    many(/* :: */[
                          Glamor.all,
                          /* :: */[
                            "bar",
                            /* [] */0
                          ]
                        ])
                  ], /* tuple */[
                    "transitionProperty",
                    "all, bar"
                  ]);
      }));

describe("many - conversion function", (function () {
        var many = function (values) {
          return $$String.concat(", ", List.map((function (prim) {
                            return prim;
                          }), values));
        };
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              Glamor.none
            ], /* tuple */[
              "transitionProperty",
              "none"
            ]);
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              Glamor.all
            ], /* tuple */[
              "transitionProperty",
              "all"
            ]);
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              "foo"
            ], /* tuple */[
              "transitionProperty",
              "foo"
            ]);
        return TestHelpers.testDeclaration(/* tuple */[
                    "transitionProperty",
                    many(/* :: */[
                          Glamor.all,
                          /* :: */[
                            "bar",
                            /* [] */0
                          ]
                        ])
                  ], /* tuple */[
                    "transitionProperty",
                    "all, bar"
                  ]);
      }));

describe("cons - function", (function () {
        var cons = function (v, vs) {
          if (vs === "") {
            return v;
          } else {
            return "" + (String(v) + (", " + (String(vs) + "")));
          }
        };
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              Glamor.none
            ], /* tuple */[
              "transitionProperty",
              "none"
            ]);
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              Glamor.all
            ], /* tuple */[
              "transitionProperty",
              "all"
            ]);
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              "foo"
            ], /* tuple */[
              "transitionProperty",
              "foo"
            ]);
        return TestHelpers.testDeclaration(/* tuple */[
                    "transitionProperty",
                    cons(Glamor.all, cons("bar", ""))
                  ], /* tuple */[
                    "transitionProperty",
                    "all, bar"
                  ]);
      }));

describe("cons - infix operator", (function () {
        var $star$star = function (v, vs) {
          if (vs === "") {
            return v;
          } else {
            return "" + (String(v) + (", " + (String(vs) + "")));
          }
        };
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              Glamor.none
            ], /* tuple */[
              "transitionProperty",
              "none"
            ]);
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              Glamor.all
            ], /* tuple */[
              "transitionProperty",
              "all"
            ]);
        TestHelpers.testDeclaration(/* tuple */[
              "transitionProperty",
              "foo"
            ], /* tuple */[
              "transitionProperty",
              "foo"
            ]);
        return TestHelpers.testDeclaration(/* tuple */[
                    "transitionProperty",
                    $star$star(Glamor.all, $star$star("bar", ""))
                  ], /* tuple */[
                    "transitionProperty",
                    "all, bar"
                  ]);
      }));

exports.ident              = ident;
exports.transitionProperty = transitionProperty;
/*  Not a pure module */
